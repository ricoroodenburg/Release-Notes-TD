@page "/"
@inject HttpClient Http
@rendermode InteractiveAuto
@inject NavigationManager NavigationManager
@inject DialogService DialogService

@using Newtonsoft.Json
@using TopdeskReleaseNotesV2.Models


<style>
    .rz-grid-table {
    width: unset;
    }
</style>

<PageTitle>Release Notes</PageTitle>
<!-- <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3">Release Notes TOPdesk</RadzenText> -->
<RadzenTabs RenderMode="TabRenderMode.Server" @bind-SelectedIndex=@selectedIndex>
    <Tabs>
        <RadzenTabsItem Text="Listview">
            <RadzenStack Gap="1rem">
                <RadzenDataGrid Style="height:82vh; color:#525252" ShowColumnTitleAsTooltip=false PageSizeOptions="@pageSizeOptions" CellRender="@CellRender" AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" AllowColumnPicking="true" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.CheckBoxList" AllowSorting="true" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true" Data="@notes" AllowGrouping="true" Render="@OnRender" @bind-Value=@selectedNotes AllowRowSelectOnRowClick=false>
                    <EmptyTemplate>
                        <p style="color: #525252; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
                    </EmptyTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(Note.release)" Title="Version" Width="5" MaxWidth="5" />
                        <RadzenDataGridColumn Property="@nameof(Note.releaseDate)" Title="Release Date" FormatString="{0:d}" Visible=false />
                        <RadzenDataGridColumn Property="@nameof(Note.description)" Title="Description" Groupable=false>
                            <Template Context="data">
                                <div style="white-space: normal;" @onclick:stopPropagation="true">
                                    @((MarkupString)data.descriptionHtml)
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(Note.category)" Title="Category" />
                        <RadzenDataGridColumn Property="@nameof(Note.SourceTag)" Title="Source" />
                        <RadzenDataGridColumn Property=hosting.saas Title="SaaS" />
                        <RadzenDataGridColumn Property=hosting.onpremisesvirtualappliance Title="Virtual Appliance" />
                        <RadzenDataGridColumn Property=isTosNote Title="TOS" HeaderTooltip="True: Indicates the old module is being used (legacy system). False: Indicates the new service architecture is being used (modern system)." />
                    </Columns>
                </RadzenDataGrid>
            </RadzenStack>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Calendar">
            <RadzenStack Gap="1rem">
                <RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End" ShowHeader=true TextProperty="Text" SelectedIndex="2">
                    <RadzenDayView />
                    <RadzenWeekView />
                    <RadzenMonthView />
                    <RadzenYearView />
                </RadzenScheduler>

            </RadzenStack>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>



@code {

    // Calander
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30, 50, 100 };
    int selectedIndex = 0;

    private IList<Note> notes = new List<Note>();
    private IList<Note> selectedNotes = new List<Note>();

    void CellRender(DataGridCellRenderEventArgs<Note> args)
    {

        if (args.Data.attentions?.highlight == true)
        {
            args.Attributes.Add("style", "background-color: #dcf1ef;");
        }

    }

    void OnRender(DataGridRenderEventArgs<Note> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "releaseDate", SortOrder = SortOrder.Descending, Title = "Release Date" });
            StateHasChanged();
        }
    }

    // Calendar
    RadzenScheduler<Appointment> scheduler;
    IList<Appointment> appointments = new List<Appointment>();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Gebruik de al ingestelde base URL
            string baseUrl = NavigationManager.BaseUri;

            // Haal de gegevens op van de API
            notes = await Http.GetFromJsonAsync<List<Note>>($"{baseUrl}api/ReleaseNotes");

            // Zet de Notes om naar Appointments voor de RadzenScheduler
            //IList<Appointment> appointments = new List<Appointment>();
            foreach (var note in notes)
            {
                // Probeer de releaseDate om te zetten naar DateTime
                if (DateTime.TryParse(note.releaseDate, out DateTime releaseDate))
                {
                    // Maak een nieuwe afspraak voor de kalender
                    var appointment = new Appointment
                        {
                            Start = releaseDate.Date,
                            End = releaseDate.Date.AddDays(1).AddMinutes(-1),
                            Text = note.release,
                            highlight = note.attentions.highlight,
                            description = note.description,
                            descriptionHtml = note.descriptionHtml
                        };

                    // Voeg de afspraak toe aan de lijst van afspraken
                    appointments.Add(appointment);
                }
                else
                {
                    // Voeg een foutmelding toe als de releaseDate niet kan worden omgezet
                    Console.WriteLine($"Error parsing release date for release {note.release}");
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        if (args.Data.highlight)
        {
            args.Attributes["style"] = "background-color: #ffc910;";
        }
        else
        {
            args.Attributes["style"] = "background-color: #0a7da0;";
        }
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background-color: #dcf1ef;";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background-color: #dcf1ef;";
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {

        var result = await DialogService.OpenAsync($"Version {@args.Data.Text}", ds =>
    @<RadzenStack Gap="1.5rem">
        <p>
            <i><div style="white-space: normal;" @onclick:stopPropagation="true">
                @((MarkupString)args.Data.descriptionHtml)
                </div>
            </i>
            <br />
            Released on: @args.Data.Start
        </p>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Close" Click="() => ds.Close(true)" Style="width: 80px;"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>);
        
    }

}