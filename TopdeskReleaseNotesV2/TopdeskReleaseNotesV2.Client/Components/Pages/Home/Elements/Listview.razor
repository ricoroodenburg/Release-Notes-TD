@using TopdeskReleaseNotesV2.Models

<RadzenTextBox id="search" Placeholder="Type to search..." @oninput=@(args => OnSearchChanged(args.Value)) />
<RadzenDataList Data="@notesFiltered" TItem="Note" PagerHorizontalAlign="HorizontalAlign.Left" AllowVirtualization=true Style="@($"height:74vh;overflow:auto;")" WrapItems=false AllowPaging=false>
    <Template Context="note">
        @{
            string textColor = note.attentions.highlight ? "#dcf1ef" : "var (--rz-body-background-color)";
            string cardStyle = $"width: 100%; overflow: hidden; background-color: {textColor}";
        }
        <RadzenCard Variant="Variant.Flat" class="rz-p-0" Style="@cardStyle">
            <RadzenRow Gap="0">
                <RadzenColumn Size="12" SizeLG="7" class="rz-p-4">
                    <RadzenRow Gap="0">

                        <RadzenColumn Size="12" SizeMD="6" SizeLG="5">
                            <RadzenText TextStyle="TextStyle.H6">@(string.IsNullOrEmpty(note.category) ? "Other" : $"{note.category}{ note.subcategory}")</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6" SizeLG="5">
                            <div style="white-space: normal;" @onclick:stopPropagation="true">
                                @((MarkupString)note.descriptionHtml)
                            </div>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6" SizeLG="5">
                            <RadzenText TextStyle="TextStyle.H6">@($"Released on {note.releaseDate} in version {note.release}")</RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </Template>
</RadzenDataList>

@code {

    [Parameter]
    public IList<Note> notes { get; set; }
    private IList<Note> notesFiltered;

    protected override void OnParametersSet()
    {
        notesFiltered = notes;
    }

    // Datagrid - Search
    private async void OnSearchChanged(object value)
    {
        string searchTerm = value?.ToString() ?? "";
        string[] terms = searchTerm.ToLowerInvariant().Split(' ', StringSplitOptions.RemoveEmptyEntries);
        notesFiltered = string.IsNullOrEmpty(searchTerm) ? notes :
            notes.Where(x =>
                terms.All(term =>
                    x.description.ToLowerInvariant().Contains(term)
                    || x.release.ToLowerInvariant().Contains(term)
                )
            ).ToList();

        StateHasChanged();
    }

}
